name: validate-migration

on: [ push ]

env:
  # Constants
  P4_DOWNLOAD_URL: "https://www.perforce.com/downloads/perforce/r23.1/bin.linux26x86_64/p4api-glibc2.3-openssl1.0.2.tgz"

  OPENSSL_DOWNLOAD_URL: "https://www.openssl.org/source/openssl-1.0.2u.tar.gz"
  OPENSSL_SOURCE_DIR: "/tmp/openssl-src"
  OPENSSL_INSTALL_DIR: "/tmp/openssl-install"

  VALGRIND_DOWNLOAD_URL: "https://sourceware.org/pub/valgrind/valgrind-3.22.0.tar.bz2"
  VALGRIND_SOURCE_DIR: "/tmp/valgrind-src"

  # Perforce credentials
  P4PORT: "perforce.sgdev.org:1666" # the address of the Perforce server to connect to
  P4USER: "admin" # the name of the Perforce user
  P4PASSWD: ${{ secrets.P4PASSWD }} # the ticket for the Perforce user

  DEPOT_NAME: "source/src-cli" # the name of the Perforce depot to validate the git migration against

  # Enable sccache
  SCCACHE_GHA_ENABLED: "true"

jobs:
  validate-migration:
    strategy:
      fail-fast: false
      matrix:
        tool:
          - addressSanitizer
          - threadSanitizer
          - undefinedSanitizer
          - valgrind
          - noSanitizer

    runs-on: ubuntu-latest

    steps:
      - name: "Prepare environment for specific tool"
        run: |
          # Set environment variables based on the tool being used. We can't refer to the matrix variables in the env section
          # of the job, so we have to do it here.
          
          bash <<EOF
            case ${{ matrix.tool }} in
            
            noSanitizer)
              echo "USE_VALGRIND=false" >> $GITHUB_ENV
              echo "CMAKE_CXX_FLAGS=" >> $GITHUB_ENV
            ;;
          
            undefinedSanitizer)
              echo "USE_VALGRIND=false" >> $GITHUB_ENV
              echo "CMAKE_CXX_FLAGS=-fsanitize=undefined -fno-sanitize-recover=all -g" >> $GITHUB_ENV
            ;;
          
            addressSanitizer)
              echo "USE_VALGRIND=false" >> $GITHUB_ENV
              echo "CMAKE_CXX_FLAGS=-fsanitize=address -fno-sanitize-recover=all -g" >> $GITHUB_ENV
            ;;
          
            threadSanitizer)
              echo "USE_VALGRIND=false" >> $GITHUB_ENV
              echo "CMAKE_CXX_FLAGS=-fsanitize=thread -fno-sanitize-recover=all -g" >> $GITHUB_ENV
            ;;
          
            valgrind)
              echo "USE_VALGRIND=true" >> $GITHUB_ENV
              echo "CMAKE_CXX_FLAGS=-g" >> $GITHUB_ENV
            ;;
          
            addressSanitizer)
              echo "USE_VALGRIND=false" >> $GITHUB_ENV
              echo "CMAKE_CXX_FLAGS=-fsanitize=address -fno-sanitize-recover=all -g" >> $GITHUB_ENV
            ;;
          
            esac
          EOF


      - uses: actions/checkout@v2

      - name: "Run sscache"
        uses: mozilla-actions/sccache-action@v0.0.3
        with:
          version: "v0.6.0"

      - name: "Install Perforce CLI"
        uses: perforce/setup-p4@1.0.2
        with:
          command: "help"
          p4_version: 23.1

      - name: "Install c++ compilation dependencies"
        run: |
          sudo apt-get update
          sudo apt-get install --yes \
            git \
            make \
            cmake \
            gcc \
            g++ \
            clang \
            libc6-dbg \
            libc++-dev \
            libc++abi-dev \
            llvm \
            ninja-build \
            gettext
          sudo apt remove valgrind --yes

      - name: "Cache Valgrind source"
        id: cache-valgrind-source
        uses: actions/cache@v2
        with:
          path: ${{ env.VALGRIND_SOURCE_DIR }}
          key: ${{ runner.os }}-valgrind--${{ env.VALGRIND_DOWNLOAD_URL }}

      - name: "Download Valgrind source"
        if : ${{ steps.cache-valgrind-source.outputs.cache-hit != 'true' }}
        run: |
          curl -L "${VALGRIND_DOWNLOAD_URL}" > valgrind.tar.bz2
          mkdir -p "${VALGRIND_SOURCE_DIR}" || true
          tar -C "${VALGRIND_SOURCE_DIR}" -xjf valgrind.tar.bz2 --strip-components 1
          rm valgrind.tar.bz2 || true

      - name: "Compile Valgrind"
        if: ${{ env.USE_VALGRIND == 'true' }}
        run: |
          pushd "${VALGRIND_SOURCE_DIR}"
          
          ./configure --prefix=/usr
          make "-j$(nproc)"
          sudo make install
          
          popd
        env:
          CC: "sccache gcc"
          CXX: "sccache gcc"

      - name: "Cache Perforce API headers"
        id: cache-p4api
        uses: actions/cache@v2
        with:
          path: vendor/helix-core-api/linux
          key: ${{ runner.os }}-p4api-${{ env.P4_DOWNLOAD_URL }}

      - name: "Download Perforce API headers"
        if: ${{ steps.cache-p4api.outputs.cache-hit != 'true' }}
        run: |
          curl -L "${P4_DOWNLOAD_URL}" --output p4.tgz
          mkdir -p vendor/helix-core-api/linux
          tar -C vendor/helix-core-api/linux -xzf p4.tgz --strip 1

      - name: "Cache OpenSSL source"
        id: cache-openssl-source
        uses: actions/cache@v2
        with:
          path: ${{ env.OPENSSL_SOURCE_DIR }}
          key: ${{ runner.os }}-openssl-source-${{ env.OPENSSL_DOWNLOAD_URL }}

      - name: "Download OpenSSL source"
        if : ${{ steps.cache-openssl-source.outputs.cache-hit != 'true' }}
        run: |
          curl -L "${OPENSSL_DOWNLOAD_URL}" --output openssl.tgz
          mkdir -p "${OPENSSL_SOURCE_DIR}" || true
          tar -C "${OPENSSL_SOURCE_DIR}" -xzf openssl.tgz --strip-components 1
          rm openssl.tgz || true

      - name: "Compile OpenSSL"
        if: ${{ steps.cache-openssl-install.outputs.cache-hit != 'true' }}
        run: |
          pushd "${OPENSSL_SOURCE_DIR}"
          
          ./config --prefix="${OPENSSL_INSTALL_DIR}" --static
          make "-j$(nproc)"
          sudo make install
          
          popd
        env:
          CC: "sccache gcc"
          CXX: "sccache gcc"

      - name: "Run validate migration script"
        run: |
          .github/workflows/run-test.sh
        env:
          P4CLIENT: "validate-migration-${{ github.ref_name }}-${{ github.sha }}-${{ github.run_number }}-${{ matrix.tool }}" # the temporary Perforce client name to use while validating the git migration
          OPENSSL_ROOT_DIR: ${{ env.OPENSSL_INSTALL_DIR }}
          CMAKE_CXX_COMPILER: "clang++"
          CMAKE_C_COMPILER: "clang"
          CMAKE_C_COMPILER_LAUNCHER: "sccache"
          CMAKE_CXX_COMPILER_LAUNCHER: "sccache"
          CMAKE_CXX_FLAGS: "${{ env.CMAKE_CXX_FLAGS }} -fno-omit-frame-pointer -O0"
          UBSAN_OPTIONS: "print_stacktrace=1" # print stack trace on undefined behavior
          ASAN_OPTIONS: "check_initialization_order=1" # check initialization order of globals

      - name: "Ensure p4 client is deleted"
        if: always()
        run: |
          p4 client -f -Fs -d "${P4CLIENT}" || true
        env:
          P4CLIENT: "validate-migration-${{ github.ref_name }}-${{ github.sha }}-${{ github.run_number }}-${{ matrix.tool }}"
