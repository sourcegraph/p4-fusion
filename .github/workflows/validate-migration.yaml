name: validate-migration

on: [ push ]

env:
  # Constants
  P4_DOWNLOAD_URL: "https://www.perforce.com/downloads/perforce/r23.1/bin.linux26x86_64/p4api-glibc2.3-openssl1.0.2.tgz"
  OPENSSL_DOWNLOAD_URL: "https://www.openssl.org/source/openssl-1.0.2u.tar.gz"
  OPENSSL_INSTALL_DIR: "/tmp/openssl-install"
  LIBCXX_INSTALL_DIR: "/tmp/libcxx-install"

  # Perforce credentials
  P4PORT: "perforce.sgdev.org:1666" # the address of the Perforce server to connect to
  P4USER: "admin" # the name of the Perforce user
  P4PASSWD: ${{ secrets.P4PASSWD }} # the ticket for the Perforce user

  DEPOT_NAME: "source/src-cli" # the name of the Perforce depot to validate the git migration against

jobs:
  validate-migration:
    strategy:
      fail-fast: false
      matrix:
        sanitizer:
          - addressSanitizer
          - threadSanitizer
          - memorySanitizer
          - undefinedSanitizer
          - noSanitizer
        include:
          - sanitizer: addressSanitizer
            CMAKE_CXX_FLAGS: "-fsanitize=address -fno-sanitize-recover=all -g"
            CMAKE_EXE_LINKER_FLAGS: ""

          - sanitizer: threadSanitizer
            CMAKE_CXX_FLAGS: "-fsanitize=thread -fno-sanitize-recover=all -g"
            CMAKE_EXE_LINKER_FLAGS: ""

          - sanitizer: memorySanitizer
            CMAKE_CXX_FLAGS: "-fsanitize=memory -fno-sanitize-recover=all -fPIE -fsanitize-memory-track-origins -nostdinc++ -nostdlib++ -stdlib=libc++ -g"
            CMAKE_EXE_LINKER_FLAGS: "-lc++ -lc++abi -lunwind -pie"

          - sanitizer: undefinedSanitizer
            CMAKE_CXX_FLAGS: "-fsanitize=undefined -fno-sanitize-recover=all -g"
            CMAKE_EXE_LINKER_FLAGS: ""

          - sanitizer: noSanitizer
            CMAKE_CXX_FLAGS: ""
            CMAKE_EXE_LINKER_FLAGS: ""

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

#      - name: "Run sscache"
#        uses: mozilla-actions/sccache-action@v0.0.3

      - name: "Install Perforce CLI"
        uses: perforce/setup-p4@1.0.2
        with:
          command: "help"
          p4_version: 23.1

      - name: "Install c++ compilation dependencies"
        run: |
          sudo apt-get update
          sudo apt-get install --yes \
            git \
            make \
            cmake \
            gcc \
            g++ \
            clang \
            libc++-dev \
            libc++abi-dev \
            llvm \
            ninja-build \
            gettext

      - name: "build and clone LLVM and clang"
        run: |
          curl -L https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-17.0.4.tar.gz --output llvm-project.tar.gz
          tar -xzf llvm-project.tar.gz
          mv llvm-project-llvmorg-17.0.4 llvm-project
          rm llvm-project.tar.gz
                  
          cd llvm-project
          mkdir build
          cmake -G Ninja -S runtimes -B build \
            -DCMAKE_INSTALL_PREFIX="${LIBCXX_INSTALL_DIR}" \
          	-DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" \
          	-DCMAKE_C_COMPILER=clang \
          	-DCMAKE_CXX_COMPILER=clang++ \
          	-DLLVM_USE_SANITIZER=MemoryWithOrigins
          #            -DCMAKE_C_COMPILER_LAUNCHER=sccache \
          #            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
          ninja --verbose -C build cxx cxxabi unwind 
          ninja --verbose -C build install-cxx install-cxxabi install-unwind

        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: "Cache Perforce API headers"
        id: cache-p4api
        uses: actions/cache@v2
        with:
          path: vendor/helix-core-api/linux
          key: ${{ runner.os }}-p4api-${{ env.P4_DOWNLOAD_URL }}

      - name: "Download Perforce API headers"
        if: ${{ steps.cache-p4api.outputs.cache-hit != 'true' }}
        run: |
          curl -L "${P4_DOWNLOAD_URL}" --output p4.tgz
          mkdir -p vendor/helix-core-api/linux
          tar -C vendor/helix-core-api/linux -xzf p4.tgz --strip 1

      - name: "Cache OpenSSL"
        uses: actions/cache@v2
        id: cache-openssl
        with:
          path: ${{ env.OPENSSL_INSTALL_DIR }}
          key: ${{ runner.os }}-openssl-${{ env.OPENSSL_DOWNLOAD_URL }}

      - name: "Compile OpenSSL"
        if: ${{ steps.cache-openssl.outputs.cache-hit != 'true' }}
        run: |
          mkdir openssl-src
          curl -L "${OPENSSL_DOWNLOAD_URL}" --output openssl.tgz
          tar -C openssl-src -xzf openssl.tgz --strip 1
          pushd openssl-src
          ./config --prefix="${OPENSSL_INSTALL_DIR}" --static
          make install
          popd

      - name: "Run validate migration script"
        run: |
          .github/workflows/run-test.sh
        env:
          P4CLIENT: "validate-migration-${{ github.ref_name }}-${{ github.sha }}-${{ github.run_number }}-${{ matrix.sanitizer }}" # the temporary Perforce client name to use while validating the git migration
          OPENSSL_ROOT_DIR: ${{ env.OPENSSL_INSTALL_DIR }}
          CMAKE_CXX_COMPILER: "clang++"
          CMAKE_C_COMPILER: "clang"
          CMAKE_CXX_FLAGS: "${{ matrix.CMAKE_CXX_FLAGS }} -fno-omit-frame-pointer  -fsanitize-ignorelist=${{ github.workspace }}/.github/workflows/msan_ignorelist.txt -O0"
          CMAKE_EXE_LINKER_FLAGS: "${{ matrix.CMAKE_EXE_LINKER_FLAGS }}"
          UBSAN_OPTIONS: "print_stacktrace=1" # print stack trace on undefined behavior
          ASAN_OPTIONS: "check_initialization_order=1" # check initialization order of globals

      - name: "Ensure p4 client is deleted"
        if: always()
        run: |
          p4 client -f -Fs -d "${P4CLIENT}" || true
        env:
          P4CLIENT: "validate-migration-${{ github.ref_name }}-${{ github.sha }}-${{ github.run_number }}-${{ matrix.sanitizer }}"
